-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from ParserLambda.y
-----------------------------------------------------------------------------

state 5 contains 1 shift/reduce conflicts.
state 8 contains 3 shift/reduce conflicts.
state 12 contains 3 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parserlamb -> CalcLamb                      (0)
	CalcLamb -> '(' CalcLamb ')'                       (1)
	CalcLamb -> var var                                (2)
	CalcLamb -> CalcLamb CalcLamb                      (3)
	CalcLamb -> lam var '.' CalcLamb                   (4)
	CalcLamb -> var                                    (5)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	lam            { TokenLam }
	var            { TokenVar $$ }
	'.'            { TokenPoint }
	'('            { TokenOB }
	')'            { TokenCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parserlamb rule  0
	CalcLamb        rules 1, 2, 3, 4, 5

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 2

	CalcLamb       goto state 3

State 1


	'('            shift, and enter state 2


State 2

	CalcLamb -> '(' . CalcLamb ')'                      (rule 1)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 2

	CalcLamb       goto state 9

State 3

	%start_parserlamb -> CalcLamb .                     (rule 0)
	CalcLamb -> CalcLamb . CalcLamb                     (rule 3)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 2
	%eof           accept

	CalcLamb       goto state 8

State 4

	CalcLamb -> lam . var '.' CalcLamb                  (rule 4)

	var            shift, and enter state 7


State 5

	CalcLamb -> var . var                               (rule 2)
	CalcLamb -> var .                                   (rule 5)

	lam            reduce using rule 5
	var            shift, and enter state 6
			(reduce using rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 6

	CalcLamb -> var var .                               (rule 2)

	lam            reduce using rule 2
	var            reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 7

	CalcLamb -> lam var . '.' CalcLamb                  (rule 4)

	'.'            shift, and enter state 11


State 8

	CalcLamb -> CalcLamb . CalcLamb                     (rule 3)
	CalcLamb -> CalcLamb CalcLamb .                     (rule 3)

	lam            shift, and enter state 4
			(reduce using rule 3)

	var            shift, and enter state 5
			(reduce using rule 3)

	'('            shift, and enter state 2
			(reduce using rule 3)

	')'            reduce using rule 3
	%eof           reduce using rule 3

	CalcLamb       goto state 8

State 9

	CalcLamb -> '(' CalcLamb . ')'                      (rule 1)
	CalcLamb -> CalcLamb . CalcLamb                     (rule 3)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 2
	')'            shift, and enter state 10

	CalcLamb       goto state 8

State 10

	CalcLamb -> '(' CalcLamb ')' .                      (rule 1)

	lam            reduce using rule 1
	var            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 11

	CalcLamb -> lam var '.' . CalcLamb                  (rule 4)

	lam            shift, and enter state 4
	var            shift, and enter state 5
	'('            shift, and enter state 2

	CalcLamb       goto state 12

State 12

	CalcLamb -> CalcLamb . CalcLamb                     (rule 3)
	CalcLamb -> lam var '.' CalcLamb .                  (rule 4)

	lam            shift, and enter state 4
			(reduce using rule 4)

	var            shift, and enter state 5
			(reduce using rule 4)

	'('            shift, and enter state 2
			(reduce using rule 4)

	')'            reduce using rule 4
	%eof           reduce using rule 4

	CalcLamb       goto state 8

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 6
Number of terminals: 5
Number of non-terminals: 2
Number of states: 13
